trigger:
- develop
- master
- release/*
- hotfix/*

pr:
- develop
- release/*
- hotfix/*

jobs:
# Build
- job: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - powershell: ./build.ps1
    displayName: 'Build'
  - publish: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    artifact: NuGet Package
    displayName: 'Publish NuGet package as build artifact'
# Integration Tests Windows (.NET Framework)
- job: Test_Windows_DotNetFramework
  displayName: 'Integration Tests Windows (.NET Framework)'
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 -verbosity diagnostic
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests Windows (.NET Framework)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Windows (.NET Core tool)
- job: Test_Windows_DotNetCoreTool
  displayName: Integration Tests Windows (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: dotnet tool restore
    workingDirectory: ./tests/integration/
    displayName: 'Restore .NET Core tool'
  - powershell: dotnet cake
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests Windows (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 10.14 (Mono)
- job: Test_macOS_Mono
  displayName: 'Integration Tests macOS 10.14 (Mono)'
  dependsOn: Build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  # To manually select a Xamarin SDK version on the Hosted macOS agent, enable this script with the SDK version you want to target
  #  https://go.microsoft.com/fwlink/?linkid=871629 
  - bash: |
      sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_18_1
    displayName: 'Select Mono 5.18.1'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity diagnostic
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests macOS 10.14 (Mono)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 10.15 (.NET Core tool)
- job: Test_macOS_DotNetCoreTool
  displayName: Integration Tests macOS 10.15 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./tests/integration/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests macOS 10.15 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 16.04 (Mono)
- job: Test_ubuntu_Mono
  displayName: 'Integration Tests Ubuntu 16.04 (Mono)'
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity diagnostic
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests Ubuntu 16.04 (Mono)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 16.04 (.NET Core tool)
- job: Test_ubuntu_DotNetCoreTool
  displayName: Integration Tests Ubuntu 16.04 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./tests/integration/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./tests/integration/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/integration/BuildArtifacts/output
    artifact: Integration Tests Ubuntu 16.04 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
