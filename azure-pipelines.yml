trigger:
- develop
- master
- release/*
- hotfix/*

pr:
- develop
- release/*
- hotfix/*

jobs:
# Build
- job: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  # .NET 5 required for GitVersion
  - task: UseDotNet@2
    inputs:
      version: '5.x'
    displayName: 'Install .NET 5'
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: UseDotNet@2
    inputs:
      version: '7.x'
    displayName: 'Install .NET 7'
  - task: UseDotNet@2
    inputs:
      version: '8.x'
    displayName: 'Install .NET 8'
  - powershell: ./build.ps1
    displayName: 'Build'
  - publish: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    artifact: NuGet Package
    displayName: 'Publish NuGet package as build artifact'
# Integration Tests Frosting Windows 2019 (.NET 6)
- job: Test_Frosting_Windows_2019_Net5
  displayName: Integration Tests Frosting Windows 2019 (.NET 6)
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net6.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net6.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Windows 2019 (.NET 6)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting Windows (.NET 7)
- job: Test_Frosting_Windows_2022_Net7
  displayName: Integration Tests Frosting Windows 2022 (.NET 7)
  dependsOn: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '7.x'
    displayName: 'Install .NET 7'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net7.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net7.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Windows 2022 (.NET 7)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting Windows (.NET 8)
- job: Test_Frosting_Windows_2022_Net8
  displayName: Integration Tests Frosting Windows 2022 (.NET 8)
  dependsOn: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '8.x'
    displayName: 'Install .NET 8'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net8.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net8.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Windows 2022 (.NET 8)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner Windows 2019 (.NET Core tool)
- job: Test_Script_Runner_Windows_2019_DotNetCoreTool
  displayName: Integration Tests Script Runner Windows 2019 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner Windows 2019 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner Windows 2022 (.NET Core tool)
- job: Test_Script_Runner_Windows_DotNetCoreTool
  displayName: Integration Tests Script Runner Windows 2022 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner Windows 2022 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting macOS 11 (.NET 6)
- job: Test_Frosting_macOS_11_Net6
  displayName: Integration Tests Frosting macOS 11 (.NET 6)
  dependsOn: Build
  pool:
    vmImage: 'macOS-11'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net6.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net6.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting macOS 11 (.NET 6)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting macOS 12 (.NET 7)
- job: Test_Frosting_macOS_12_Net7
  displayName: Integration Tests Frosting macOS 12 (.NET 7)
  dependsOn: Build
  pool:
    vmImage: 'macOS-12'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '7.x'
    displayName: 'Install .NET 7'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net7.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net7.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting macOS 12 (.NET 7)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting macOS 12 (.NET 8)
- job: Test_Frosting_macOS_12_Net8
  displayName: Integration Tests Frosting macOS 12 (.NET 8)
  dependsOn: Build
  pool:
    vmImage: 'macOS-12'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '8.x'
    displayName: 'Install .NET 8'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net8.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net8.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting macOS 12 (.NET 8)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner macOS 11 (.NET Core tool)
- job: Test_Script_Runner_macOS_11_DotNetCoreTool
  displayName: Integration Tests Script Runner macOS 11 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'macOS-11'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner macOS 11 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner macOS 12 (.NET Core tool)
- job: Test_Script_Runner_macOS_12_DotNetCoreTool
  displayName: Integration Tests Script Runner macOS 12 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'macOS-12'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner macOS 12 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting Ubuntu 20.04 (.NET 6)
- job: Test_Frosting_ubuntu_2004_Net6
  displayName: Integration Tests Frosting Ubuntu 20.04 (.NET 6)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net6.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net6.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Ubuntu 20.04 (.NET 6)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting Ubuntu 22.04 (.NET 7)
- job: Test_Frosting_ubuntu_2204_Net7
  displayName: Integration Tests Frosting Ubuntu 22.04 (.NET 7)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '7.x'
    displayName: 'Install .NET 7'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net7.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net7.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Ubuntu 22.04 (.NET 7)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Frosting Ubuntu 22.04 (.NET 8)
- job: Test_Frosting_ubuntu_2204_Net8
  displayName: Integration Tests Frosting Ubuntu 22.04 (.NET 8)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '8.x'
    displayName: 'Install .NET 8'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/frosting/net8.0
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/frosting/net8.0/build/BuildArtifacts/output
    artifact: Integration Tests Frosting Ubuntu 22.04 (.NET 8)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner Ubuntu 20.04 (.NET Core tool)
- job: Test_Script_Runner_ubuntu_2004_DotNetCoreTool
  displayName: Integration Tests Script Runner Ubuntu 20.04 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner Ubuntu 20.04 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Script Runner Ubuntu 22.04 (.NET Core tool)
- job: Test_Script_Runner_ubuntu_2204_DotNetCoreTool
  displayName: Integration Tests Script Runner Ubuntu 22.04 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install NodeJs 20.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./tests/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/tests/script-runner/BuildArtifacts/output
    artifact: Integration Tests Script Runner Ubuntu 22.04 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
